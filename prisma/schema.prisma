generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Leaderboard {
  id        String    @id(map: "leaderboard_pkey") @default(uuid()) @db.Uuid
  marketcap Int
  amount    Int
  cost      Int
  userId    String    @db.Uuid
  tokenId   String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  token     Token     @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_fkey")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
}

model Token {
  id           String        @id(map: "token_pkey") @default(uuid()) @db.Uuid
  tokenId      Int           @unique
  ticker       String
  description  String
  image        String
  twitter      String?
  telegram     String?
  website      String?
  userId       String        @db.Uuid
  name         String
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?     @default(now()) @db.Timestamptz(6)
  tokenAddress String        @unique
  tokenCreator String
  leaderboard  Leaderboard[]
  user         User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
  Trades       Trades[]
}

model User {
  id            String        @id(map: "user_pkey") @default(uuid()) @db.Uuid
  name          String
  imageUrl      String?
  email         String?       @unique
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?     @default(now()) @db.Timestamptz(6)
  solAddress    String?       @unique(map: "User_solanaAddress_key")
  ethAddress    String?       @unique(map: "User_ethereumAddress_key")
  followingUser Follow[]      @relation("Follow_accountToUser")
  followerUser  Follow[]      @relation("Follow_followerToUser")
  leaderboard   Leaderboard[]
  token         Token[]
  Trades        Trades[]
}

model Trades {
  id          String   @id(map: "trade_pkey") @default(uuid()) @db.Uuid
  tokenId     String   @db.Uuid
  userId      String   @db.Uuid
  category    String
  price       Int
  amount      Int
  nativeToken String
  chain       String
  createdAt   DateTime @default(now()) @db.Timetz(6)
  Token       Token    @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_id_fkey")
  User        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
}

model Follow {
  id            String    @id(map: "follow_pkey") @default(uuid()) @db.Uuid
  account       String    @db.Uuid
  follower      String    @db.Uuid
  status        String
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @db.Timestamptz(6)
  followedAt    DateTime? @db.Timestamptz(6)
  unfollowedAt  DateTime? @db.Timestamptz(6)
  followingUser User      @relation("Follow_accountToUser", fields: [account], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
  followerUser  User      @relation("Follow_followerToUser", fields: [follower], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey_two")
}
