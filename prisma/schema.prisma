generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Leaderboard {
  id        String    @id(map: "leaderboard_pkey") @default(uuid()) @db.Uuid
  marketcap Int
  amount    Int
  cost      Int
  userId    String    @db.Uuid
  tokenId   String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  token     Token     @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_fkey")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
}

model Token {
  id              String        @id(map: "token_pkey") @default(uuid()) @db.Uuid
  ticker          String
  description     String
  image           String
  twitter         String?
  telegram        String?
  website         String?
  userId          String        @db.Uuid
  name            String
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?     @default(now()) @db.Timestamptz(6)
  tokenAddress    String        @unique
  tokenCreator    String
  marketCap       Int
  discord         String?
  other           String?
  chain           String
  isClaimable     Boolean       @default(false)
  isNsfw          Boolean       @default(false)
  platformAddress String
  origin          String        @default("internal")
  bannerImage     String?       @default("https://qojtn2d8pd7yjrch.public.blob.vercel-storage.com/MEMEPOOL-BANNER-CdewEFgVdlXs3JQK7jvHBDDPJyBoUE.png")
  type            String?       @default("ERC20")
  Comment         Comment[]
  leaderboard     Leaderboard[]
  user            User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
  TokenVote       TokenVote[]
  Trades          Trades[]
  Meme            Meme[]
  Claim           Claim[]
  Post            Post[]
}

model User {
  id               String         @id(map: "user_pkey") @default(uuid()) @db.Uuid
  name             String         @unique(map: "User_name_key")
  imageUrl         String?
  email            String?
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?      @default(now()) @db.Timestamptz(6)
  solAddress       String?        @unique(map: "User_solanaAddress_key")
  ethAddress       String?        @unique(map: "User_ethereumAddress_key")
  twitterId        BigInt?        @unique(map: "unique_twitter_id")
  twitterFollowers BigInt?
  Comment          Comment[]
  CommentLikes     CommentLikes[]
  followingUser    Follow[]       @relation("Follow_accountToUser")
  followerUser     Follow[]       @relation("Follow_followerToUser")
  leaderboard      Leaderboard[]
  token            Token[]
  TokenVote        TokenVote[]
  Trades           Trades[]
  Meme             Meme[]
  Post             Post[]
}

model Trades {
  id              String   @id(map: "trade_pkey") @default(uuid()) @db.Uuid
  tokenId         String   @db.Uuid
  userId          String   @db.Uuid
  category        String
  price           Decimal  @db.Decimal(26, 18)
  amount          Decimal  @db.Decimal(28, 18)
  nativeCost      Decimal  @db.Decimal(26, 18)
  usdCost         Decimal  @db.Decimal(26, 18)
  nativeToken     String
  chain           String
  transactionHash String
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  Token           Token    @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_id_fkey")
  User            User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
}

model Follow {
  id            String    @id(map: "follow_pkey") @default(uuid()) @db.Uuid
  account       String    @db.Uuid
  follower      String    @db.Uuid
  status        String
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @db.Timestamptz(6)
  followedAt    DateTime? @db.Timestamptz(6)
  unfollowedAt  DateTime? @db.Timestamptz(6)
  followingUser User      @relation("Follow_accountToUser", fields: [account], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
  followerUser  User      @relation("Follow_followerToUser", fields: [follower], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey_two")
}

model Comment {
  id           String         @id(map: "comment_pkey") @default(uuid()) @db.Uuid
  message      String
  author       String         @db.Uuid
  tokenId      String         @db.Uuid
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?      @default(now()) @db.Timestamptz(6)
  token        Token          @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_fkey")
  user         User           @relation(fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
  commentLikes CommentLikes[]
}

model CommentLikes {
  id        String    @id(map: "comment_likes_pkey") @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  commentId String    @db.Uuid
  status    String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  Comment   Comment   @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_id_fkey")
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TokenVote {
  id         Int       @id(map: "Vote_pkey") @default(autoincrement())
  tokenId    String    @db.Uuid
  userId     String?   @db.Uuid
  status     String?   @db.VarChar(8)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  Token      Token     @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vote_token_fk")
  User       User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vote_user_fk")

  @@unique([tokenId, userId], map: "vote_token_user_unique")
}

model Meme {
  id        String    @id(map: "meme_pkey") @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  tokenId   String    @db.Uuid
  postId    String    @db.Uuid
  imageUrl  String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
  token     Token     @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_id_fkey")
  post      Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_id_fkey")
}

model Claim {
  id             String    @id(map: "claim_pkey") @default(uuid()) @db.Uuid
  frogId         Int
  tokenAddress   String
  claimerAddress String?
  isClaimed      Boolean   @default(false)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @db.Timestamptz(6)
  token          Token     @relation(fields: [tokenAddress], references: [tokenAddress], onDelete: NoAction, onUpdate: NoAction, map: "token_address_fkey")
}

model Post {
  id        String    @id(map: "post_pkey") @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  tokenId   String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
  token     Token     @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_id_fkey")
  memes     Meme[]
}
