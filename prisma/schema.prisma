generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Leaderboard {
  id        String    @id(map: "leaderboard_pkey") @default(uuid()) @db.Uuid
  marketcap Int
  amount    Int
  cost      Int
  userId    String    @db.Uuid
  tokenId   String    @db.Uuid
  createdAt DateTime  @db.Timestamptz(6) @default(now())
  updatedAt DateTime? @db.Timestamptz(6) @default(now())
  token     Token     @relation(fields: [tokenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_fkey")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
}

model Token {
  id           String        @id(map: "token_pkey") @default(uuid()) @db.Uuid
  tokenId      Int           @unique
  ticker       String
  description  String
  image        String
  twitter      String?
  telegram     String?
  website      String?
  userId       String        @db.Uuid
  name         String
  createdAt    DateTime      @db.Timestamptz(6) @default(now())
  updatedAt    DateTime?     @db.Timestamptz(6) @default(now())
  tokenAddress String        @unique
  tokenCreator String 
  leaderboard  Leaderboard[]
  user         User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_fkey")
}

model User {
  id          String        @id(map: "user_pkey") @default(uuid()) @db.Uuid
  name        String
  wallet      String        @unique
  imageUrl    String?
  email       String?
  createdAt   DateTime      @db.Timestamptz(6) @default(now())
  updatedat   DateTime?     @db.Timestamptz(6) @default(now())
  leaderboard Leaderboard[]
  token       Token[]
}
